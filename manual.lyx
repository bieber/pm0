#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
NA'VI/PL Compiler User Manual
\end_layout

\begin_layout Author
Paul Gatterdam, Robert Bieber
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Setup
\end_layout

\begin_layout Section
Compilation
\end_layout

\begin_layout Standard
To compile the NA’VI/PL compiler, first navigate to the proper directory
 within the computer system using the terminal by using the command “cd
 directory” to navigate through each level of the computer’s file system
 to get to the directory where the compiler was downloaded and stored.
 When that directory is reached, use the command “make” to compile the compiler.
 The GCC C compiler and a BASH compatible shell are required to compile
 and run the NA'VI/PL compiler.
\end_layout

\begin_layout Section
Execution
\end_layout

\begin_layout Standard
To run the compiler, enter the command “./compiler inputfile”.
 The compiler will then run the input file through the scanner first, then
 the parser, and then will finally put the compiled program through the
 virtual machine and run the program.
 If any errors are encountered at any step of the process, the errors will
 be displayed and the compiler will quit.
 
\end_layout

\begin_layout Standard
Once the NA'VI/PL compiler is running, appropriate error messages will be
 displayed after each part of the compiler is run if necessary.
 The error messages are detailed enough that the error should be easily
 understood and fixable in the code that was run through the compiler.
 If no errors are encountered, the code will run to completion and display
 the final assembly language program that is then interpreted by the virtual
 machine.
 Each step of the virtual machine and the contents of the program counter,
 lexicographical level, offset, and the contents of the stack will also
 be shown alongside each step in the execution of the assembly code program
 that was generated 
\end_layout

\begin_layout Chapter
The NA'VI/PL Language
\end_layout

\begin_layout Section
Program Structure
\end_layout

\begin_layout Standard
The structure of a NA'VI/PL program is as follows; each section of the program
 will be explained in detail.
 In this listing, the text contained within brackets is descriptive, not
 actual code.
 The bracketed parts are also optional.
 Your program might, for instance, contain only constant declarations and
 a statement: the other parts are not required.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Comments can be mixed throughout the program */
\end_layout

\begin_layout Plain Layout

[constant declarations];
\end_layout

\begin_layout Plain Layout

[variable declarations];
\end_layout

\begin_layout Plain Layout

[procedure declarations];
\end_layout

\begin_layout Plain Layout

[statement].
\end_layout

\end_inset


\end_layout

\begin_layout Section
Comments
\end_layout

\begin_layout Standard
You can include comments anywhere within your NA'VI/PL program.
 A comment is any block of text that begins with the two-character sequence
 
\begin_inset Quotes eld
\end_inset

/*
\begin_inset Quotes erd
\end_inset

 and ends with the sequence 
\begin_inset Quotes eld
\end_inset

*/
\begin_inset Quotes erd
\end_inset

.
 The compiler will ignore any text in between these sequences, so you can
 include whatever text you need to describe the function of your program
 within them.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a := 2; /* This stores the value 2 in the variable a */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Constant Declarations
\end_layout

\begin_layout Standard
A constant is a symbol that represents a number in your program.
 A constant must be named, and you may use any valid identifier for this
 purpose.
 A valid identifier is a series of characters beginning with a letter and
 containing only letters and numbers that is not a reserved word.
 Examples of valid identifiers are 
\begin_inset Quotes eld
\end_inset

pi
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Count1
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

Three8Nine
\begin_inset Quotes erd
\end_inset

.
 Examples of 
\series bold
invalid
\series default
 identifiers are 
\begin_inset Quotes eld
\end_inset

0times
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

The_END
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

const
\begin_inset Quotes erd
\end_inset

.
 Remember that identifiers can not contain symbols or begin with a number.
\end_layout

\begin_layout Standard
Once you have decided on a name for your constant, you can assign it a value.
 This value will never change once it has been assigned, so it is important
 to use constants only where the same value will be used repeatedly.
 For instance, if you wished to approximate the area of a circle, you may
 wish to define the constant 
\begin_inset Quotes eld
\end_inset

pi
\begin_inset Quotes erd
\end_inset

 with the value 3, to avoid mistakenly typing a different value for pi at
 some point in your program.
 Once you have decided on a name and value for a constant, you can declare
 a constant with the syntax 
\begin_inset Quotes eld
\end_inset

const [name] = [value];
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

const [name1] = [value1], [name2] = [value2], ...;
\begin_inset Quotes erd
\end_inset

 to declare multiple constants.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const x = 5; /* Declares a single constant */
\end_layout

\begin_layout Plain Layout

const x = 5, y = 3; /* Declares two constants */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Variable Declarations
\end_layout

\begin_layout Standard
A variable is a place to store a value that can change throughout the program's
 execution.
 A variable must be named by a valid identifier in the same manner as a
 constant.
 Once a variable is declared, it will initially have the value 0.
 During the program's execution variables can be changed to other values
 using statements, discussed in section 2.6.
 The syntax to declare a variable is the same as the syntax to declare a
 constant, except that the 
\begin_inset Quotes eld
\end_inset

const
\begin_inset Quotes erd
\end_inset

 keyword has been replaced by 
\begin_inset Quotes eld
\end_inset

int
\begin_inset Quotes erd
\end_inset

, and the 
\begin_inset Quotes eld
\end_inset

= [value]
\begin_inset Quotes erd
\end_inset

 parts are omitted, because a value can not be specified in a variable declarati
on.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int x; /* Declares a single variable */
\end_layout

\begin_layout Plain Layout

int x, y; /* Declares multiple variables */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Procedure Declarations
\end_layout

\begin_layout Standard
After declaring variables, you can define subprocedures.
 A subprocedure is a section of code that can be executed multiple times
 within your program.
 Executing a subprocedure is referred to as 
\begin_inset Quotes eld
\end_inset

calling
\begin_inset Quotes erd
\end_inset

 it, and will be discussed in more detail in section 2.6.
 The syntax to declare a procedure is as follows.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure <identifier>;
\end_layout

\begin_layout Plain Layout

[constant declarations];
\end_layout

\begin_layout Plain Layout

[variable declarations];
\end_layout

\begin_layout Plain Layout

[procedure declarations];
\end_layout

\begin_layout Plain Layout

[statement];
\end_layout

\end_inset

<identifier> can be any valid identifier used to name the procedure.
 Constants and variables can be declared in a procedure in the same way
 that they were declared before.
 A constant or variable declared within a procedure is said to be 
\begin_inset Quotes eld
\end_inset

local
\begin_inset Quotes erd
\end_inset

 to that procedure, and it can only be accessed by that procedure or other
 procedures contained within it.
 Local procedures and variables will be discussed in section 2.6.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Defines a procedure that doubles a variable named y */
\end_layout

\begin_layout Plain Layout

procedure double; 
\end_layout

\begin_layout Plain Layout

const x = 2;
\end_layout

\begin_layout Plain Layout

	y := y * x;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Statements
\end_layout

\begin_layout Standard
A statement is a command that instructs the program to take an action, and
 statements make up the functional parts of programs and procedures.
 The main program and procedures both allow you to specify a single statement
 to execute.
 The following sections will list the types of statements you can use.
\end_layout

\begin_layout Subsection
Assignment
\end_layout

\begin_layout Standard
Assigning a new value to a variable is a common task.
 The syntax to assign to a variable is 
\begin_inset Quotes eld
\end_inset

<identifier> := <expression>
\begin_inset Quotes erd
\end_inset

.
 <identifier> can be the name of any variable that has been previously declared.
 It can be either a local variable of the current procedure, or a local
 variable of any procedure that the current procedure is a subprocedure
 of.
 If the same name is used at multiple levels, then the variable accessed
 will be the one closest to the current procedure: first the compiler will
 look for variables declared locally, then in the parent procedure, then
 in its parent procedure, etc.
 
\end_layout

\begin_layout Standard
<expression> can be any valid expresion.
 Expressions will be discussed in more detail in section 2.7.
 When an assignment statement is executed, the value of <expression> is
 stored in the variable named by <identifier>
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Doubles the variable x */
\end_layout

\begin_layout Plain Layout

x := 2 * x
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Procedure Calls
\end_layout

\begin_layout Standard
To execute a procedure, use the syntax 
\begin_inset Quotes eld
\end_inset

syaw <procedure>
\begin_inset Quotes erd
\end_inset

, where <procedure> is the name of a procedure.
 At any time, you can call any subprocedure of the current procedure, or
 any procedure that has the same parent procedure as the current procedure.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Calls the function Z */
\end_layout

\begin_layout Plain Layout

syaw Z
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Input
\end_layout

\begin_layout Standard
To receive input from the user on the console, use the syntax 
\begin_inset Quotes eld
\end_inset

mi <identifier>
\begin_inset Quotes erd
\end_inset

, where <identifier> is the name of any variable that can be accessed from
 the current procedure (rules for variable access are the same for input
 as they are for assignment).
 When this statement is executed, the program will wait for the user to
 enter a number at the terminal, and it will be stored in the variable named.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Gets input into the variable x */
\end_layout

\begin_layout Plain Layout

mi x
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
To print output on the console, use the syntax 
\begin_inset Quotes eld
\end_inset

wrrpa <identifier>
\begin_inset Quotes erd
\end_inset

, where <identifier> is the name of any variable that can be accessed from
 the current procedure.
 When this statement is executed, the program will print the value of the
 variable to the console.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Prints the variable x */
\end_layout

\begin_layout Plain Layout

wrrpa x
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conditional Execution
\end_layout

\begin_layout Standard
Sometimes, you may wish to execute some statement only if some condition
 is true.
 For instance, you may want to decrease the value of a variable, but only
 if it is currently greater than zero.
 To accomplish this, you can use the syntax 
\begin_inset Quotes eld
\end_inset

txo <condition> tsakrr <statement>
\begin_inset Quotes erd
\end_inset

, where <condition> is any valid conditional expression (conditionals will
 be discussed in more detail in section 2.8) and <statement> is any valid
 statement.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Decrease x if it is greater than 0 */
\end_layout

\begin_layout Plain Layout

txo x > 0 tsakrr x := x - 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may also specify a statement to execute if the condition is not met,
 with the syntax 
\begin_inset Quotes eld
\end_inset

txo <condition> tsakrr <statement> txokefyaw <statement>
\begin_inset Quotes erd
\end_inset

.
 This syntax is the same as before, except that the second statement will
 be executed if the condition is not met.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Decrease x if it is greater than 0 */
\end_layout

\begin_layout Plain Layout

/* If x is less than 0 set it to 5 */
\end_layout

\begin_layout Plain Layout

txo x > 0 tsakrr
\end_layout

\begin_layout Plain Layout

	x := x - 1
\end_layout

\begin_layout Plain Layout

txokefyaw
\end_layout

\begin_layout Plain Layout

	x := 5
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Loops
\end_layout

\begin_layout Standard
A loop allows you to repeat the same statement multiple times, as long as
 some condition is true.
 You can use the syntax 
\begin_inset Quotes eld
\end_inset

tengkrr <condition> si <statement>
\begin_inset Quotes erd
\end_inset

 to do this, where <condition> is any valid conditional expression and <statemen
t> is any valid statement.
 The statement will be repeated over and over again until the condition
 becomes false.
 If the condition is false initially, then the statement will not be executed
 at all.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Loop until x = 0 */
\end_layout

\begin_layout Plain Layout

tengkrr x != 0 si
\end_layout

\begin_layout Plain Layout

	x := x - 1
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multiple Statements
\end_layout

\begin_layout Standard
Usually, you will want to execute multiple statements at a time, rather
 than just one.
 The syntax to do this is 
\begin_inset Quotes eld
\end_inset

snga'i [statements] fpe'
\begin_inset Quotes erd
\end_inset

, where [statements] is any number of statements such that any statement
 other than the first is preceded by a semicolon.
 Note that the keywords 
\begin_inset Quotes eld
\end_inset

snga'i
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

fpe'
\begin_inset Quotes erd
\end_inset

 must be entered with the ASCII apostrophe character, not the Unicode right-sing
le-quote character.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Display every number from 0 to 4 */
\end_layout

\begin_layout Plain Layout

snga'i
\end_layout

\begin_layout Plain Layout

  x := 0;
\end_layout

\begin_layout Plain Layout

  tengkrr x < 5 si
\end_layout

\begin_layout Plain Layout

    snga'i
\end_layout

\begin_layout Plain Layout

      wrrpa x;
\end_layout

\begin_layout Plain Layout

      x := x + 1;
\end_layout

\begin_layout Plain Layout

    fpe';
\end_layout

\begin_layout Plain Layout

fpe'
\end_layout

\end_inset


\end_layout

\begin_layout Section
Expressions
\end_layout

\begin_layout Standard
When an expression is required, you may use any combination of variables,
 constants, numbers, parenthesis, and the operators +, -, *, and / to form
 a mathematical expression.
 For instance, the expression 
\begin_inset Quotes eld
\end_inset

x * 5 + y
\begin_inset Quotes erd
\end_inset

 would evaluate to the value of x multiplied by five and added to the value
 of y.
 The * and / operators are always evaluated before the + and - operators,
 and any parts of an expression in parenthesis are evaluated together.
 This means that, for instance, 
\begin_inset Quotes eld
\end_inset

(5 + 2) * 3
\begin_inset Quotes erd
\end_inset

 will evaluate to 21, while 
\begin_inset Quotes eld
\end_inset

5 + 2 * 3
\begin_inset Quotes erd
\end_inset

 will evaluate to 11.
 The operators that you can use are as follows.
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features booktabs="true">
<column alignment="center" valignment="top" width="2in">
<column alignment="center" valignment="top" width="2in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expression With Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x + y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluates to the value of x added to the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x - y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluates to the value of y subtracted from the value of x
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x * y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluates to the value of x multiplied by the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x / y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluates to the whole number part of the value of x divided by the value
 of y
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Sets x equal to three times the sum of it and y */
\end_layout

\begin_layout Plain Layout

x := 3 * (x + y)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conditionals
\end_layout

\begin_layout Standard
Conditionals are expressions that are either true or false.
 These may be statements of equality or inequality.
 The syntax for a conditional is either 
\begin_inset Quotes eld
\end_inset

<expression> <operator> <expression>
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

odd <expression>
\begin_inset Quotes erd
\end_inset

, where <expression> can be any valid expression, and <operator> can be
 any valid conditional operators.
 If the 
\begin_inset Quotes eld
\end_inset

odd
\begin_inset Quotes erd
\end_inset

 keyword is used, the conditional will evaluate to true if the expression
 evaluates to an odd number.
 The operators you can use are as follows.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features booktabs="true">
<column alignment="center" valignment="top" width="2in">
<column alignment="center" valignment="top" width="2in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition with Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluates True If
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x < y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is less than the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x <= y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is less than or equal to the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x > y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is greater than the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x >= y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is greater than or equal to the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x = y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is equal to the value of y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x != y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of x is not equal to the value of y
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* Display every number from 0 to 4 */
\end_layout

\begin_layout Plain Layout

snga'i
\end_layout

\begin_layout Plain Layout

  x := 0;
\end_layout

\begin_layout Plain Layout

  tengkrr x < 5 si
\end_layout

\begin_layout Plain Layout

    snga'i
\end_layout

\begin_layout Plain Layout

      wrrpa x;
\end_layout

\begin_layout Plain Layout

      x := x + 1;
\end_layout

\begin_layout Plain Layout

    fpe';
\end_layout

\begin_layout Plain Layout

fpe'
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Sample Programs
\end_layout

\begin_layout Section
Recursive Factorial Program
\end_layout

\begin_layout Standard
This program will compute the factorial of a number entered at the command
 line using recursive procedure calls.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int f, n;
\end_layout

\begin_layout Plain Layout

procedure fact;
\end_layout

\begin_layout Plain Layout

    int ans1;
\end_layout

\begin_layout Plain Layout

    snga'i
\end_layout

\begin_layout Plain Layout

        ans1:=n;
\end_layout

\begin_layout Plain Layout

        n:= n-1;
\end_layout

\begin_layout Plain Layout

        txo n = 0 tsakrr f := 1 txokefyaw f := 2;
\end_layout

\begin_layout Plain Layout

        txo n > 0 tsakrr syaw fact;
\end_layout

\begin_layout Plain Layout

        f:=f*ans1;
\end_layout

\begin_layout Plain Layout

    fpe';
\end_layout

\begin_layout Plain Layout

snga'i
\end_layout

\begin_layout Plain Layout

    mi n;
\end_layout

\begin_layout Plain Layout

    syaw fact;
\end_layout

\begin_layout Plain Layout

    wrrpa f;
\end_layout

\begin_layout Plain Layout

	mi;
\end_layout

\begin_layout Plain Layout

	wrrpa;
\end_layout

\begin_layout Plain Layout

fpe'.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the above example, the first line “int f, n;” declares two new variables,
 f and n.
 The second line “procedure fact;
\begin_inset Quotes erd
\end_inset

 declares a new procedure named fact.
 The third line 
\begin_inset Quotes eld
\end_inset

int ans1;
\begin_inset Quotes erd
\end_inset

 declares a new variable within the local scope of the procedure fact named
 ans1.
 
\end_layout

\begin_layout Standard
The fourth line “snga’i” indicates that a statement section is about to
 follow.
 The fifth line “ans1 := n;” gives the value stored in n to the variable
 ans1.
 The sixth line “n := n-1;” subtracts one from the value of n and stores
 the result back in the variable n.
 
\end_layout

\begin_layout Standard
The seventh line 
\begin_inset Quotes eld
\end_inset

txo n = 0 tsakrr f := 1 txokefyaw f := 2;
\begin_inset Quotes erd
\end_inset

 is an txo statement that checks the condition that n = 0 and if that condition
 evaluates to true, sets the value of f to 1, otherwise sets the value of
 f to 2.
 The eighth line 
\begin_inset Quotes eld
\end_inset

txo n > 0 tsakrr syaw fact;
\begin_inset Quotes erd
\end_inset

 is another txo statement that checks to see if the value of n is greater
 than zero and if it is, calls the procedure fact (this is an example of
 very basic recursion).
 The ninth line 
\begin_inset Quotes eld
\end_inset

f := f*ans1;
\begin_inset Quotes erd
\end_inset

 multiplies the value stored in the variable f by the value in the variable
 ans1 and stores the result in f.
 The tenth line 
\begin_inset Quotes eld
\end_inset

fpe';
\begin_inset Quotes erd
\end_inset

 signifies the end of the statement segment of code in the procedure fact.
 
\end_layout

\begin_layout Standard
The eleventh line 
\begin_inset Quotes eld
\end_inset

snga'i
\begin_inset Quotes erd
\end_inset

 indicates the start of a segment of multiple statements.
 The twelfth line 
\begin_inset Quotes eld
\end_inset

mi n;
\begin_inset Quotes erd
\end_inset

 takes input from the user and stores the input value in the variable n.
 The thirteenth line 
\begin_inset Quotes eld
\end_inset

syaw fact;
\begin_inset Quotes erd
\end_inset

 calls and executes the procedure fact.
 The fourteenth line 
\begin_inset Quotes eld
\end_inset

wrrpa f;
\begin_inset Quotes erd
\end_inset

 outputs the value stored in the variable f to the screen.
 The fifteenth line 
\begin_inset Quotes eld
\end_inset

mi;
\begin_inset Quotes erd
\end_inset

 takes user input and stores it on the top of the stack.
 The sixteenth line 
\begin_inset Quotes eld
\end_inset

wrrpa;
\begin_inset Quotes erd
\end_inset

 outputs the value on the top of the stack to the screen.
 The seventeenth line 
\begin_inset Quotes eld
\end_inset

fpe'.
\begin_inset Quotes erd
\end_inset

 signifies the end of the segment of statement code in the main program
 block and the end of the program.
\end_layout

\begin_layout Section
Nested Procedure Program
\end_layout

\begin_layout Standard
This program demonstrates the use of nested procedures.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const k = 3;
\end_layout

\begin_layout Plain Layout

int x,y,z,v,w;
\end_layout

\begin_layout Plain Layout

/* This is a comment */
\end_layout

\begin_layout Plain Layout

procedure a;
\end_layout

\begin_layout Plain Layout

  int x,y,u,v;
\end_layout

\begin_layout Plain Layout

  procedure b;
\end_layout

\begin_layout Plain Layout

    int y,z,v;
\end_layout

\begin_layout Plain Layout

    procedure c;
\end_layout

\begin_layout Plain Layout

      int y,z;
\end_layout

\begin_layout Plain Layout

      snga'i
\end_layout

\begin_layout Plain Layout

        z:=1;
\end_layout

\begin_layout Plain Layout

        x:=y+z+w
\end_layout

\begin_layout Plain Layout

      fpe';
\end_layout

\begin_layout Plain Layout

    snga'i
\end_layout

\begin_layout Plain Layout

      y:=x+u+w;
\end_layout

\begin_layout Plain Layout

      syaw c
\end_layout

\begin_layout Plain Layout

    fpe';
\end_layout

\begin_layout Plain Layout

  snga'i
\end_layout

\begin_layout Plain Layout

    z:=2;
\end_layout

\begin_layout Plain Layout

    u:=z+w;
\end_layout

\begin_layout Plain Layout

    syaw b
\end_layout

\begin_layout Plain Layout

  fpe';
\end_layout

\begin_layout Plain Layout

snga'i
\end_layout

\begin_layout Plain Layout

  x:=1; y:=2; z:=3; v:=4; w:=5;
\end_layout

\begin_layout Plain Layout

  x:=v+w;
\end_layout

\begin_layout Plain Layout

  wrrpa z;
\end_layout

\begin_layout Plain Layout

  syaw a;
\end_layout

\begin_layout Plain Layout

fpe'.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above program is designed to show the nesting of procedures.
 The first line, "const k = 3;" defines a constant named k that is given
 the value 3 and cannot be changed at any point in the program, but can
 be read in the exact same manner as a variable.
 The second line, "/* This is a comment */", is a comment and is completely
 ignored by the compiler.
 
\end_layout

\begin_layout Standard
The third line, "int x, y, z, v, w;" is a declaration of many variables.
 The fourth line, "procedure a;" is the declaration of the procedure named
 a and the code following it as the function.
 The fifth line, "int x, y, u, v;", declares four variables within the local
 scope of the procedure a (note that if x, y, or v is called by procedure
 a or any of the nested procedures within a, these three variables will
 override the variables declared in main first if they are within or within
 the parent of the function being currently executed).
 
\end_layout

\begin_layout Standard
The sixth line, "procedure b;" simply declares the procedure b.
 The seventh line, "int y, z, v;" declares these three variables within
 the local scope of procedure b (again note that y, z, and v will override
 any variables with the same name above their level if possible).
 
\end_layout

\begin_layout Standard
The eighth line, "procedure c;" declares the procedure named c.
 The ninth line, "int y, z;" declares two variables with a local scope to
 the procedure c.
 The tenth line, "snga'i" declares the start of a segment of statement code.
 The eleventh line, "z := 1;" assigns the value 1 to the variable z (which
 is the variable declared within procedure c).
 The twelfth line, "x := y+z+w", sums the variables y (in procedure c),
 z (in procedure c), and w (in the main section of code) and assigns them
 to x (in procedure a).
 The thirteenth line, "fpe';" signifies the end of the statement segment
 of procedure c.
 
\end_layout

\begin_layout Standard
The fourteenth line, "snga'i" begins the statement segment of code that
 is part of procedure b.
 The fifteenth line, "y := x+u+w;", sums the values of x (in procedure a),
 u (in procedure a), and w (in the main section of code) and stores the
 value in y (in procedure b).
 The sixteenth line, "syaw c", calls and executes the procedure c.
 The seventeenth line, "fpe';" signifies the end of the statement segment
 of procedure b.
 
\end_layout

\begin_layout Standard
The eighteenth line, "snga'i" begins the statement segment of procedure
 a.
 The nineteenth line, "z := 2;" assigns 2 to the value of z (in the main
 section of code).
 The twentieth line, "u := z+w;", sums the values of z (in the main section
 of code) and w (also in the main section of code) and stores the result
 in the variable u (in procedure a).
 The twenty-first line of code, "syaw b", calls and executes the procedure
 b.
 The twenty-second line of code "fpe';", signifies the end of the statement
 segment of procedure a.
 
\end_layout

\begin_layout Standard
The twenty-third line of code, "snga'i", begins the statement segment of
 the main code.
 The twenty-fourth line of code, "x := 1; y := 2; z := 3; v := 4; w := 5;"
 assigns the given values to their respective variables (at this point,
 all variables used are strictly in the scope of the main code, or in a
 sense, the entire program).
 The twenty-fifth line of code, "x := v+w;", sums the variables v and w
 and stores them in the variable x.
 The twenty-sixth line of code, "wrrpa z;" displays the value of the variable
 z to the screen.
 The twenty-seventh line of code, "syaw a;" calls and executes the procedure
 a.
 The twenty-eighth and final line of code, "fpe'." signifies the end of the
 statement segment in the main section of code and the end of the program.
\end_layout

\end_body
\end_document
